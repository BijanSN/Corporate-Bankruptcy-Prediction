test =Updated_data %>%
count(bool)
View(test)
test =Updated_data %>%
count_(bool)
test =Updated_data %>%
summarise(n(bool))
test =Updated_data %>%
summarise(nD= n(bool))
test =Updated_data %>%
group_by(gvkey) %>%
summarise(n= n())
View(test)
test =Updated_data %>%
group_by(gvkey) %>%
summarise(count= n())
View(test)
test =Updated_data %>%
group_by(gvkey) %>%
summarise(count= ifelse(.$splticrm==D,1,0))
test =Updated_data %>%
group_by(gvkey) %>%
summarise(count= ifelse(.$splticrm=="D",1,0))
View(test)
lapply(clean_data[, c("splticrm")], table)
print(clea)
head(clean_data)
print(clean_data)
clean_data %>%
table(-$splticrm)
table(.$splticrm)
clean_data %>%
table(.$splticrm)
t_ratings= clean_data %>%
table(.$splticrm)
clean_data$splticrm
table(clean_data$splticrm)
ggplot(clean_data, aes(clean_data$splticrm )) +
geom_bar() +
theme_bw()
t_ratings=table(clean_data$splticrm)
t_ratings= clean_data %>%
table($splticrm)
rm=t_ratings
rm(t_ratings)
rm(rm)
t_ratings= clean_data %>%
table(.$splticrm)
t_ratings= clean_data$splticrm %>%
apply(table())
t_ratings= clean_data$splticrm %>%
apply(,table())
t_ratings= clean_data$splticrm %>%
apply(,,table())
apply(1,table())
t_ratings= clean_data$splticrm %>%
apply(1,table())
apply(clean_data$splticrm,1,table
apply(clean_data$splticrm,1,table)
clean_data$splticrm
table(clean_data$splticrm)
t_ratings=table(clean_data$splticrm)
apply(clean_data$splticrm,2,table)
apply(clean_data,2,table)
tabletest= apply(clean_data,2,table)
View(tabletest)
clean_data%>%
rowwise() %>%
mutate(Def_bool= ifelse(.$splticrm=="D",1,0))
clean_data %>%
group_by(1:n())
head(clean_data)
clean_data$gvkey
numFirms= clean_data %>%
count(gvkey) %>%
numFirms= clean_data %>%
count(gvkey)
View(numFirms)
View(NumDefaultedKey)
table(clean_data$gvkey)
install.packages("magrittr")
library(magrittr)
typeof(clean_data)
str(clean_data)
head(clean_data)
tibble(clean_data)
head(clean_data)
clean_data= tibble(clean_data)
head(clean_data)
str(clean_data) # to convert into factors !
str(clean_data$splticrm) # to convert into factors !
table(clean_data$type)
clean_data$splticrm %<>% factor
str(clean_data$splticrm) # to convert into factors !
table(clean_data$splticrm)
rm(list=ls())
##################### Setup :
library(RPostgres)
library(dplyr)
library(dplyr)
load("./_DATABASE/[RAW] Compagny_Default.RData")
View(data)
clean_data=na.omit(data)
clean_data=tibble(clean_data) # convert into a "modern" dataframe
clean_data= clean_data  %>%
mutate(datadate=as.Date(datadate))
View(clean_data)
View(data)
clean_data= clean_data  %>%
mutate(datadate=as.Date(.$datadate))
View(clean_data)
clean_data= clean_data  %>%
mutate(datadate=as.Date(.$datadate)) %>% # from numeric to date type
mutate(rating= factor(.$splticrm))
View(clean_data)
clean_data= clean_data  %>%
mutate(datadate=as.Date(.$datadate)) %>% # from numeric to date type
mutate(rating= factor(.$splticrm)) %>%
mutate(splticrm==NULL)
clean_data= clean_data  %>%
mutate(datadate=as.Date(.$datadate)) %>% # from numeric to date type
mutate(rating= factor(.$splticrm)) %>%
mutate(splticrm=NULL)
View(clean_data)
load("./_DATABASE/[RAW] Compagny_Default.RData")
################### Preprocessing :
clean_data=na.omit(data) # remove N/As
clean_data=tibble(clean_data) # convert into a "modern" dataframe
clean_data= clean_data  %>%
mutate(datadate=as.Date(.$datadate)) %>% # from numeric to date type
mutate(splticrm= factor(.$splticrm)) %>% #convert ratings into factors
rename(ratings=splticrm=) #drop unused column
clean_data= clean_data  %>%
mutate(datadate=as.Date(.$datadate)) %>% # from numeric to date type
mutate(splticrm= factor(.$splticrm)) %>% #convert ratings into factors
rename(ratings=splticrm) #drop unused column
View(clean_data)
head(clean_data)
str(clean_data)
str(clean_data)
levels(clean_data)
levels(clean_data$gvkey)
levels(clean_data$ratings)
levels(clean_data$ratings)[2]
levels(clean_data$ratings)[19:21]
levels(clean_data$ratings)[23:25]
clean_data= clean_data  %>%
mutate(datadate=as.Date(.$datadate)) %>% #from numeric to date type
mutate(splticrm= factor(.$splticrm)) %>% #convert ratings into factors
rename(ratings=splticrm) %>% #rename to something more clear
filter(ratings==c["N.M";"SD","Suspended"])
clean_data= clean_data  %>%
mutate(datadate=as.Date(.$datadate)) %>% #from numeric to date type
mutate(splticrm= factor(.$splticrm)) %>% #convert ratings into factors
rename(ratings=splticrm) %>% #rename to something more clear
filter(.$ratings==c["N.M";"SD","Suspended"])
clean_data= clean_data  %>%
mutate(datadate=as.Date(.$datadate)) %>% #from numeric to date type
mutate(splticrm= factor(.$splticrm)) %>% #convert ratings into factors
rename(ratings=splticrm) %>% #rename to something more clear
filter(ratings=="N.M" & "SD" &"Suspended")
clean_data= clean_data  %>%
mutate(datadate=as.Date(.$datadate)) %>% #from numeric to date type
mutate(splticrm= factor(.$splticrm)) %>% #convert ratings into factors
rename(ratings=splticrm)# %>% #rename to something more clear
# filter(ratings=="N.M" & "SD" &"Suspended")
load("./_DATABASE/[RAW] Compagny_Default.RData")
################### Preprocessing :
clean_data=na.omit(data) # remove N/As
clean_data=tibble(clean_data) # convert into a "modern" dataframe
clean_data= clean_data  %>%
mutate(datadate=as.Date(.$datadate)) %>% #from numeric to date type
mutate(splticrm= factor(.$splticrm)) %>% #convert ratings into factors
rename(ratings=splticrm)# %>% #rename to something more clear
View(clean_data)
clean_data= clean_data  %>%
mutate(datadate=as.Date(.$datadate)) %>% #from numeric to date type
mutate(splticrm= factor(.$splticrm)) %>% #convert ratings into factors
rename(ratings=splticrm)# %>% #rename to something more clear
filter(!ratings %in% c("N.M" & "SD" &"Suspended"))
count(ratings)
clean_data= clean_data  %>%
mutate(datadate=as.Date(.$datadate)) %>% #from numeric to date type
mutate(splticrm= factor(.$splticrm)) %>% #convert ratings into factors
rename(ratings=splticrm)# %>% #rename to something more clear
filter(!ratings %in% c("N.M" & "SD" &"Suspended")) %>%
count(ratings)
View(clean_data)
clean_data= clean_data  %>%
filter(!ratings %in% c("N.M" & "SD" &"Suspended"))
clean_data
clean_data= clean_data  %>%
filter(!.$ratings %in% c("N.M" & "SD" &"Suspended"))
last_error()
rlang::last_error()
clean_data= clean_data  %>%
filter(!.$ratings %in% c("N.M","SD","Suspended"))
View(clean_data)
clean_data= clean_data  %>%
filter(!ratings %in% c("N.M","SD","Suspended"))
View(clean_data)
clean_data= clean_data  %>%
filter(!ratings %in% c("N.M.","SD","Suspended"))
View(clean_data)
View(clean_data)
save(clean_data, file = "./_DATABASE/[Clean] Compagny_Default.RData")
View(clean_data)
survival_time_fc= function(latest_date,earliest_date){
ld=  as.POSIXlt(latest_date)
ed = as.POSIXlt(earliest_date)
12 * (ld$year - ed$year) + (ld$mon - ed$mon)
}
load("./_DATABASE/[Clean] Compagny_Default.RDATA")
table(clean_data$splticrm)
table(clean_data$ratings)
rm(list=ls())
load("./_DATABASE/[Clean] Compagny_Default.RDATA")
table(clean_data$ratings)
clean_data= clean_data  %>%
filter(!ratings %in% c("N.M.","SD","Suspended")) %>%  # remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%              #from numeric to date type
mutate(splticrm= factor(.$splticrm)) %>%              #convert ratings into factors
rename(ratings=splticrm)             %>%              #rename to something more clear
droplevels()
load("./_DATABASE/[RAW] Compagny_Default.RData")
################### Preprocessing :
clean_data=na.omit(data)                                # remove N/As
clean_data=tibble(clean_data)                           # convert into a "modern" dataframe
# str(clean_data) # we need to convert type
clean_data= clean_data  %>%
mutate(datadate=as.Date(.$datadate)) %>%              #from numeric to date type
filter(!ratings %in% c("N.M.","SD","Suspended")) %>%  # remove unusable ratings
rename(ratings=splticrm)             %>%              #rename to something more clear
mutate(splticrm= factor(.$splticrm)) %>%              #convert ratings into factors
droplevels()
clean_data= clean_data  %>%
filter(!splticrm %in% c("N.M.","SD","Suspended")) %>% # remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%              #from numeric to date type
mutate(splticrm= factor(.$splticrm)) %>%              #convert ratings into factors
rename(ratings=splticrm)             %>%              #rename to something more clear
droplevels()
View(clean_data)
save(clean_data, file = "./_DATABASE/[Clean] Compagny_Default.RData")
rm(list=ls())
survival_time_fc= function(latest_date,earliest_date){
ld=  as.POSIXlt(latest_date)
ed = as.POSIXlt(earliest_date)
12 * (ld$year - ed$year) + (ld$mon - ed$mon)
}
#######################
load("./_DATABASE/[Clean] Compagny_Default.RDATA")
table(clean_data$ratings)
hist(t_ratings_all)
barplot(t_ratings_all)
t_ratings_all= table(clean_data$ratings) #total ratings
barplot(t_ratings_all)
load("./_DATABASE/[Clean] Compagny_Default.RDATA")
table(clean_data$gvkey)
table(clean_data$splticrm)
table(clean_data$ratings)
table(clean_data$datadate)
ggplot(clean_data, aes(clean_data$ratings )) + # colors : fill=clean_data$splticrm
geom_bar() +
theme_bw()
barplot(t_ratings_all)                   #visually
ggplot(clean_data, aes(clean_data$ratings )) + # colors : fill=clean_data$splticrm
geom_bar() +
theme_bw()
clean_data$ratings <- factor(clean_data$ratings, levels = clean_data$ratings)
clean_data$ratings
clean_data= clean_data  %>%
filter(!splticrm %in% c("N.M.","SD","Suspended")) %>%                     #remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%                                  #from numeric to date type
mutate(splticrm= factor(.$splticrm,levels=c("AAA","AA+","AA", "AA-",
"A+","A","A-","BBB+","BBB",
"BBB-", "BB+","BB","BB-",
"B+","B-","B","CCC+","CCC",
"CCC-","CC","C","D"))) %>%              #convert ratings into ordered factors
rename(ratings=splticrm)%>%                                               #rename to something more clear
droplevels()                                                              #drop unused factors
load("./_DATABASE/[RAW] Compagny_Default.RData")
################### Preprocessing :
clean_data=na.omit(data)                                # remove N/As
clean_data=tibble(clean_data)                           # convert into a "modern" dataframe
# str(clean_data) # we need to convert type
clean_data= clean_data  %>%
filter(!splticrm %in% c("N.M.","SD","Suspended")) %>%                     #remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%                                  #from numeric to date type
mutate(splticrm= factor(.$splticrm,levels=c("AAA","AA+","AA", "AA-",
"A+","A","A-","BBB+","BBB",
"BBB-", "BB+","BB","BB-",
"B+","B-","B","CCC+","CCC",
"CCC-","CC","C","D"))) %>%              #convert ratings into ordered factors
rename(ratings=splticrm)%>%                                               #rename to something more clear
droplevels()                                                              #drop unused factors
View(clean_data)
save(clean_data, file = "./_DATABASE/[Clean] Compagny_Default.RData")
rm(list=ls())
load("./_DATABASE/[Clean] Compagny_Default.RDATA")
t_ratings_all= table(clean_data$ratings) #total ratings of the data sets
barplot(t_ratings_all)                   #visually
ggplot(clean_data, aes(clean_data$ratings )) + # colors : fill=clean_data$splticrm
geom_bar() +
theme_bw()
t_ratings_all= table(clean_data$ratings) #total ratings of the data sets
ggplot(clean_data, aes(clean_data$ratings )) + # colors : fill=clean_data$splticrm
geom_bar() +
theme_bw()
t_ratings=table(clean_data$splticrm)
ggplot(clean_data, aes(clean_data$ratings )) +
geom_bar() +
theme_bw()
NumDefaultedKey= clean_data %>%
filter(splticrm =="D") %>%
group_by(gvkey) %>%
mutate(Default_bool=as.factor('1'))
NumDefaultedKey= clean_data %>%
filter(ratings =="D") %>%
group_by(gvkey) %>%
mutate(Default_bool=as.factor('1'))
View(NumDefaultedKey)
Updated_data= clean_data %>%
mutate(bool= ifelse(.$splticrm=='D',1,0)) #%>% # create a new column "bool" =1 if the compagny defaulted
Updated_data= clean_data %>%
mutate(bool= ifelse(.$ratings=='D',1,0)) #%>% # create a new column "bool" =1 if the compagny defaulted
View(Updated_data)
load("./_DATABASE/[RAW] Compagny_Default.RData")
################### Preprocessing :
clean_data=na.omit(data)                                # remove N/As
clean_data=tibble(clean_data)                           # convert into a "modern" dataframe
# str(clean_data) # we need to convert type
clean_data= clean_data  %>%
filter(!splticrm %in% c("N.M.","SD","Suspended")) %>%                     #remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%                                  #from numeric to date type
mutate(defaultbool= ifelse(.$ratings=='D',1,0))%>%                       # create a new column "default_bool" =1 if the compagny defaulted
mutate(splticrm= factor(.$splticrm,levels=c("AAA","AA+","AA", "AA-",
"A+","A","A-","BBB+","BBB",
"BBB-", "BB+","BB","BB-",
"B+","B-","B","CCC+","CCC",
"CCC-","CC","C","D"))) %>%              #convert ratings into ordered factors
rename(ratings=splticrm)%>%                                               #rename to something more clear
droplevels()                                                              #drop unused factors
clean_data= clean_data  %>%
filter(!splticrm %in% c("N.M.","SD","Suspended")) %>%                     #remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%                                  #from numeric to date type
mutate(defaultbool= ifelse(.$splticrm=='D',1,0))%>%                       # create a new column "default_bool" =1 if the compagny defaulted
mutate(splticrm= factor(.$splticrm,levels=c("AAA","AA+","AA", "AA-",
"A+","A","A-","BBB+","BBB",
"BBB-", "BB+","BB","BB-",
"B+","B-","B","CCC+","CCC",
"CCC-","CC","C","D"))) %>%              #convert ratings into ordered factors
rename(ratings=splticrm)%>%                                               #rename to something more clear
droplevels()                                                              #drop unused factors
View(clean_data)
save(clean_data, file = "./_DATABASE/[Clean] Compagny_Default.RData")
## last compagny date ratings and bool default or not.
Updated_data= Updated_data %>%
group_by(gvkey) %>%
filter(datadate==max(datadate)) %>%
mutate(bool= max(bool))
View(Updated_data)
t_ratings_all %>%
ggplot() +
geom_bar() +
theme_bw()
t_ratings_all %>%
ggplot(,aes(clean_data$ratings )) +
geom_bar() +
theme_bw()
View(Updated_data)
latest_data= clean_data %>%
group_by(gvkey) %>%
filter(datadate==max(datadate)) %>%
mutate(bool= max(bool))
ggplot(latest_data, aes(latest_data$ratings ))+
geom_bar() +
theme_bw()
latest_data= clean_data %>%
group_by(gvkey) %>%
filter(datadate==max(datadate)) %>%
mutate(bool= max(bool))
latest_data= clean_data %>%
group_by(gvkey)
View(latest_data)
latest_data= clean_data %>%
group_by(gvkey) %>%
filter(datadate==max(datadate))
View(latest_data)
latest_data= clean_data %>%
group_by(gvkey) %>%
filter(datadate==max(datadate))
View(latest_data)
latest_data= clean_data %>%
group_by(gvkey) %>%
filter(datadate==max(datadate))
ggplot(latest_data, aes(latest_data$ratings ))+
geom_bar() +
theme_bw()
first_data= clean_data %>%
group_by(gvkey) %>%
filter(datadate==min(datadate))
ggplot(first_data, aes(first_data$ratings ))+
geom_bar() +
theme_bw()
min(clean_data$datadate)
min(clean_data$datadate)
max(clean_data$datadate)
NumDefaultedKey= clean_data %>%
group_by(gvkey)           %>%
filter(splticrm =="D")    %>%
# Number of firms who got a rating 'D' *at least* once:
count(gvkey) #710 firms got D (multiple times)
NumDefaultedKey= clean_data %>%
group_by(gvkey)           %>%
filter(ratings =="D")    %>%
# Number of firms who got a rating 'D' *at least* once:
count(gvkey) #710 firms got D (multiple times)
View(NumDefaultedKey)
Default rate= 710/5972
Default_rate= 710/5972
numFirms= clean_data %>%
count(gvkey)
View(numFirms)
ggplot(clean_data, aes(clean_data$ratings,fill=clean_data$ratings)) +
geom_bar() +
theme_bw()
ggplot(clean_data, aes(clean_data$ratings,fill=clean_data$defaultbool)) +
geom_bar() +
theme_bw()
View(clean_data)
clean_data %<>%
filter(!splticrm %in% c("N.M.","SD","Suspended")) %>%                     #remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%                                  #from numeric to date type
mutate(defaultbool= ifelse(.$splticrm=='D',1,0))%>%                       # create a new column "default_bool" =1 if the compagny defaulted
mutate(splticrm= factor(.$splticrm,levels=c("AAA","AA+","AA", "AA-",
"A+","A","A-","BBB+","BBB",
"BBB-", "BB+","BB","BB-",
"B+","B-","B","CCC+","CCC",
"CCC-","CC","C","D"))) %>%              #convert ratings into ordered factors
rename(ratings=splticrm) %>%                                              #rename to something more clear
droplevels()                                                              #drop unused factors
load("./_DATABASE/[RAW] Compagny_Default.RData")
################### Preprocessing :
clean_data=na.omit(data)                                # remove N/As
clean_data=tibble(clean_data)                           # convert into a "modern" dataframe
# str(clean_data) # we need to convert type
clean_data %<>%
filter(!splticrm %in% c("N.M.","SD","Suspended")) %>%                     #remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%                                  #from numeric to date type
mutate(defaultbool= ifelse(.$splticrm=='D',1,0))%>%                       # create a new column "default_bool" =1 if the compagny defaulted
mutate(splticrm= factor(.$splticrm,levels=c("AAA","AA+","AA", "AA-",
"A+","A","A-","BBB+","BBB",
"BBB-", "BB+","BB","BB-",
"B+","B-","B","CCC+","CCC",
"CCC-","CC","C","D"))) %>%              #convert ratings into ordered factors
rename(ratings=splticrm) %>%                                              #rename to something more clear
droplevels()                                                              #drop unused factors
View(clean_data)
clean_data %<>%
group_by(gvkey) %>%
mutate(defaultbool= ifelse(.$splticrm=='D',1,0))%>%                       # create a new column "default_bool" =1 if the compagny defaulted
View(clean_data)
clean_data %<>%
group_by(gvkey) %>%
mutate(defaultbool= ifelse(.$ratings=='D',1,0))%>%                       # create a new column "default_bool" =1 if the compagny defaulted
View(clean_data)
load("./_DATABASE/[RAW] Compagny_Default.RData")
################### Preprocessing :
clean_data=na.omit(data)                                # remove N/As
clean_data=tibble(clean_data)                           # convert into a "modern" dataframe
# str(clean_data) # we need to convert type
clean_data %<>%                                                                       #apply Right-Hand-Side functions and assigns to L.H.S.
filter(!splticrm %in% c("N.M.","SD","Suspended")) %>%                     #remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%                                  #from numeric to date type
mutate(splticrm= factor(.$splticrm,levels=c("AAA","AA+","AA", "AA-",
"A+","A","A-","BBB+","BBB",
"BBB-", "BB+","BB","BB-",
"B+","B-","B","CCC+","CCC",
"CCC-","CC","C","D"))) %>%              #convert ratings into ordered factors
rename(ratings=splticrm) %>%                                              #rename to something more clear
droplevels()                                                              #drop unused factors
clean_data %<>%
group_by(gvkey) %>%
mutate(defaultbool= ifelse(.$ratings=='D',1,0))%>%                       # create a new column "default_bool" =1 if the compagny defaulted
View(clean_data)
clean_data %<>%
group_by(gvkey)
View(clean_data)
clean_data %<>%
group_by(gvkey) %>%
mutate(defaultbool= ifelse(.$ratings=='D',1,0))
clean_data %<>%
group_by(gvkey) %>%
mutate(defaultbool= ifelse(ratings=='D',1,0))
View(clean_data)
clean_data %<>%
group_by(gvkey) %>%
mutate(defaultbool= ifelse(ratings=='D',1,0))  %>%                     # create a new column "default_bool" =1 if the compagny defaulted
mutate(bool= max(bool))
clean_data %<>%
group_by(gvkey) %>%
mutate(defaultbool= ifelse(ratings=='D',1,0))  %>%                     # create a new column "default_bool" =1 if the compagny defaulted
mutate(defaultbool= max(defaultbool))
View(clean_data)
save(clean_data, file = "./_DATABASE/[Clean] Compagny_Default.RData")
ggplot(clean_data, aes(clean_data$ratings,fill=clean_data$defaultbool)) +
geom_bar() +
theme_bw()
clean_data$defaultbool
ggplot(first_data, aes(first_data$ratings,fill=first_data$defaultbool)) +
geom_bar() +
theme_bw()
