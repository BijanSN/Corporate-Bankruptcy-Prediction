count(gvkey)
View(numFirms)
ggplot(clean_data, aes(clean_data$ratings,fill=clean_data$ratings)) +
geom_bar() +
theme_bw()
ggplot(clean_data, aes(clean_data$ratings,fill=clean_data$defaultbool)) +
geom_bar() +
theme_bw()
View(clean_data)
clean_data %<>%
filter(!splticrm %in% c("N.M.","SD","Suspended")) %>%                     #remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%                                  #from numeric to date type
mutate(defaultbool= ifelse(.$splticrm=='D',1,0))%>%                       # create a new column "default_bool" =1 if the compagny defaulted
mutate(splticrm= factor(.$splticrm,levels=c("AAA","AA+","AA", "AA-",
"A+","A","A-","BBB+","BBB",
"BBB-", "BB+","BB","BB-",
"B+","B-","B","CCC+","CCC",
"CCC-","CC","C","D"))) %>%              #convert ratings into ordered factors
rename(ratings=splticrm) %>%                                              #rename to something more clear
droplevels()                                                              #drop unused factors
load("./_DATABASE/[RAW] Compagny_Default.RData")
################### Preprocessing :
clean_data=na.omit(data)                                # remove N/As
clean_data=tibble(clean_data)                           # convert into a "modern" dataframe
# str(clean_data) # we need to convert type
clean_data %<>%
filter(!splticrm %in% c("N.M.","SD","Suspended")) %>%                     #remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%                                  #from numeric to date type
mutate(defaultbool= ifelse(.$splticrm=='D',1,0))%>%                       # create a new column "default_bool" =1 if the compagny defaulted
mutate(splticrm= factor(.$splticrm,levels=c("AAA","AA+","AA", "AA-",
"A+","A","A-","BBB+","BBB",
"BBB-", "BB+","BB","BB-",
"B+","B-","B","CCC+","CCC",
"CCC-","CC","C","D"))) %>%              #convert ratings into ordered factors
rename(ratings=splticrm) %>%                                              #rename to something more clear
droplevels()                                                              #drop unused factors
View(clean_data)
clean_data %<>%
group_by(gvkey) %>%
mutate(defaultbool= ifelse(.$splticrm=='D',1,0))%>%                       # create a new column "default_bool" =1 if the compagny defaulted
View(clean_data)
clean_data %<>%
group_by(gvkey) %>%
mutate(defaultbool= ifelse(.$ratings=='D',1,0))%>%                       # create a new column "default_bool" =1 if the compagny defaulted
View(clean_data)
load("./_DATABASE/[RAW] Compagny_Default.RData")
################### Preprocessing :
clean_data=na.omit(data)                                # remove N/As
clean_data=tibble(clean_data)                           # convert into a "modern" dataframe
# str(clean_data) # we need to convert type
clean_data %<>%                                                                       #apply Right-Hand-Side functions and assigns to L.H.S.
filter(!splticrm %in% c("N.M.","SD","Suspended")) %>%                     #remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%                                  #from numeric to date type
mutate(splticrm= factor(.$splticrm,levels=c("AAA","AA+","AA", "AA-",
"A+","A","A-","BBB+","BBB",
"BBB-", "BB+","BB","BB-",
"B+","B-","B","CCC+","CCC",
"CCC-","CC","C","D"))) %>%              #convert ratings into ordered factors
rename(ratings=splticrm) %>%                                              #rename to something more clear
droplevels()                                                              #drop unused factors
clean_data %<>%
group_by(gvkey) %>%
mutate(defaultbool= ifelse(.$ratings=='D',1,0))%>%                       # create a new column "default_bool" =1 if the compagny defaulted
View(clean_data)
clean_data %<>%
group_by(gvkey)
View(clean_data)
clean_data %<>%
group_by(gvkey) %>%
mutate(defaultbool= ifelse(.$ratings=='D',1,0))
clean_data %<>%
group_by(gvkey) %>%
mutate(defaultbool= ifelse(ratings=='D',1,0))
View(clean_data)
clean_data %<>%
group_by(gvkey) %>%
mutate(defaultbool= ifelse(ratings=='D',1,0))  %>%                     # create a new column "default_bool" =1 if the compagny defaulted
mutate(bool= max(bool))
clean_data %<>%
group_by(gvkey) %>%
mutate(defaultbool= ifelse(ratings=='D',1,0))  %>%                     # create a new column "default_bool" =1 if the compagny defaulted
mutate(defaultbool= max(defaultbool))
View(clean_data)
save(clean_data, file = "./_DATABASE/[Clean] Compagny_Default.RData")
ggplot(clean_data, aes(clean_data$ratings,fill=clean_data$defaultbool)) +
geom_bar() +
theme_bw()
clean_data$defaultbool
ggplot(first_data, aes(first_data$ratings,fill=first_data$defaultbool)) +
geom_bar() +
theme_bw()
numfirms2$GVKEY %in% NumDefaultedKey$gvkey
load("./_DATABASE/[RAW] Compagny_Default.RData")
################### Preprocessing :
clean_data=na.omit(data)                                # remove N/As
clean_data=tibble(clean_data)                           # convert into a "modern" dataframe
# str(clean_data) # we need to convert type
clean_data %<>%                                                                       #apply Right-Hand-Side functions and assigns to L.H.S.
filter(!splticrm %in% c("N.M.","SD","Suspended")) %>%                     #remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%                                  #from numeric to date type
mutate(splticrm= factor(.$splticrm,levels=c("AAA","AA+","AA", "AA-",
"A+","A","A-","BBB+","BBB",
"BBB-", "BB+","BB","BB-",
"B+","B-","B","CCC+","CCC",
"CCC-","CC","C","D"))) %>%              #convert ratings into ordered factors
rename(ratings=splticrm) %>%                                              #rename to something more clear
droplevels()                                                              #drop unused factors
group_by(gvkey) %>%
mutate(defaultbool= ifelse(ratings=='D',1,0))  %>%                     # create a new column "default_bool" =1 if the compagny defaulted
clean_data %<>%
mutate(defaultbool= max(defaultbool))
# Processing for the second query: ------------------------------------------
numFirms= clean_data %>%
count(gvkey)
library(dplyr)
library(magrittr)
numFirms= clean_data %>%
count(gvkey)
write.table(numFirms$gvkey,"Compagny_gvkey.txt", sep = "/n",row.names = F, col.names = F, quote = FALSE) # Save for WRDS's link table  query
write.table(numFirms$gvkey,"./_DATABASE/Compagny_gvkey.txt", sep = "/n",row.names = F, col.names = F, quote = FALSE) # Save for WRDS's link table  query
linktable=read.csv("./_DATABASE/compagny_ID.csv")
linktable$gvkey
linktable2=read.csv("./_DATABASE/Corporate_Data.csv")
numfirms2=linktable2 %>%
count(GVKEY)
numfirms2$GVKEY %in% NumDefaultedKey$gvkey
z= numfirms2$GVKEY %in% NumDefaultedKey$gvkey
table(z)
match(numfirms2$GVKEY, NumDefaultedKey$gvkey)
linktable2=read.csv("./_DATABASE/Compagny_financials.csv")
View(linktable2)
load("./_DATABASE/[RAW] Compagny_Default.RData")
################### Preprocessing :
clean_data=na.omit(data)                                # remove N/As
clean_data=tibble(clean_data)                           # convert into a "modern" dataframe
# str(clean_data) # we need to convert type
clean_data %<>%                                                                       #apply Right-Hand-Side functions and assigns to L.H.S.
filter(!splticrm %in% c("N.M.","SD","Suspended")) %>%                     #remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%                                  #from numeric to date type
mutate(splticrm= factor(.$splticrm,levels=c("AAA","AA+","AA", "AA-",
"A+","A","A-","BBB+","BBB",
"BBB-", "BB+","BB","BB-",
"B+","B-","B","CCC+","CCC",
"CCC-","CC","C","D"))) %>%              #convert ratings into ordered factors
rename(ratings=splticrm) %>%                                              #rename to something more clear
droplevels()                                                              #drop unused factors
clean_data %<>%
library(dplyr)
library(magrittr)
load("./_DATABASE/[RAW] Compagny_Default.RData")
################### Preprocessing :
clean_data=na.omit(data)                                # remove N/As
clean_data=tibble(clean_data)                           # convert into a "modern" dataframe
# str(clean_data) # we need to convert type
clean_data %<>%                                                                       #apply Right-Hand-Side functions and assigns to L.H.S.
filter(!splticrm %in% c("N.M.","SD","Suspended")) %>%                     #remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%                                  #from numeric to date type
mutate(splticrm= factor(.$splticrm,levels=c("AAA","AA+","AA", "AA-",
"A+","A","A-","BBB+","BBB",
"BBB-", "BB+","BB","BB-",
"B+","B-","B","CCC+","CCC",
"CCC-","CC","C","D"))) %>%              #convert ratings into ordered factors
rename(ratings=splticrm) %>%                                              #rename to something more clear
droplevels()                                                              #drop unused factors
load("./_DATABASE/[RAW] Compagny_Default.RData")
################### Preprocessing :
clean_data=na.omit(data)                                # remove N/As
clean_data=tibble(clean_data)                           # convert into a "modern" dataframe
# str(clean_data) # we need to convert type
clean_data %<>%                                                                       #apply Right-Hand-Side functions and assigns to L.H.S.
library(tibble)
clean_data=na.omit(data)                                # remove N/As
clean_data=tibble(clean_data)                           # convert into a "modern" dataframe
# str(clean_data) # we need to convert type
clean_data %<>%                                                                       #apply Right-Hand-Side functions and assigns to L.H.S.
filter(!splticrm %in% c("N.M.","SD","Suspended")) %>%                     #remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%                                  #from numeric to date type
mutate(splticrm= factor(.$splticrm,levels=c("AAA","AA+","AA", "AA-",
"A+","A","A-","BBB+","BBB",
"BBB-", "BB+","BB","BB-",
"CCC-","CC","C","D"))) %>%              #convert ratings into ordered factors
rename(ratings=splticrm) %>%                                              #rename to something more clear
"B+","B-","B","CCC+","CCC",
droplevels()                                                              #drop unused factors
library(ggplot2)
library(ggthemes)
library(gganimate)
library(lattice)
library(dplyr)
library(tidyr)
library(tibble)
library(magrittr)
library(dplyr)
library(magrittr)
library(tibble)
################### Loading the data :
load("./_DATABASE/[RAW] Compagny_Default.RData")
################### Preprocessing :
clean_data=na.omit(data)                                # remove N/As
clean_data=tibble(clean_data)                           # convert into a "modern" dataframe
# str(clean_data) # we need to convert type
clean_data %<>%                                                                       #apply Right-Hand-Side functions and assigns to L.H.S.
filter(!splticrm %in% c("N.M.","SD","Suspended")) %>%                     #remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%                                  #from numeric to date type
mutate(splticrm= factor(.$splticrm,levels=c("AAA","AA+","AA", "AA-",
"A+","A","A-","BBB+","BBB",
"BBB-", "BB+","BB","BB-",
"B+","B-","B","CCC+","CCC",
"CCC-","CC","C","D"))) %>%              #convert ratings into ordered factors
rename(ratings=splticrm) %>%                                              #rename to something more clear
droplevels()                                                              #drop unused factors
rm(list=ls())
library(RPostgres)
library(dplyr)
setwd("C:/Users/Vida/Desktop/Th?se/Corporate Default Prediciton/")
library(dplyr)
library(magrittr)
library(tibble)
library(ggplot2)
library(ggthemes)
library(gganimate)
library(lattice)
library(dplyr)
library(tidyr)
library(tibble)
library(magrittr)
load("./_DATABASE/[RAW] Compagny_Default.RData")
################### Preprocessing :
clean_data=na.omit(data)                                # remove N/As
clean_data=tibble(clean_data)                           # convert into a "modern" dataframe
# str(clean_data) # we need to convert type
clean_data %<>%                                                                       #apply Right-Hand-Side functions and assigns to L.H.S.
filter(!splticrm %in% c("N.M.","SD","Suspended")) %>%                     #remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%                                  #from numeric to date type
mutate(splticrm= factor(.$splticrm,levels=c("AAA","AA+","AA", "AA-",
"A+","A","A-","BBB+","BBB",
"BBB-", "BB+","BB","BB-",
"B+","B-","B","CCC+","CCC",
"CCC-","CC","C","D"))) %>%              #convert ratings into ordered factors
rename(ratings=splticrm) %>%                                              #rename to something more clear
droplevels()                                                              #drop unused factors
clean_data %<>%
group_by(gvkey) %>%
mutate(defaultbool= ifelse(ratings=='D',1,0))  %>%                     # create a new column "default_bool" =1 if the compagny defaulted
mutate(defaultbool= max(defaultbool))
# Processing for the second query: ------------------------------------------
numFirms= clean_data %>%
count(gvkey)
write.table(numFirms$gvkey,"./_DATABASE/Compagny_gvkey.txt", sep = "/n",row.names = F, col.names = F, quote = FALSE) # Save for WRDS's link table  query
View(data)
View(data)
View(clean_data)
load("./_DATABASE/[RAW] Compagny_Default.RData")
################### Preprocessing :
clean_data=na.omit(data)                                # remove N/As
clean_data=tibble(clean_data)                           # convert into a "modern" dataframe
# str(clean_data) # we need to convert type
clean_data %<>%                                                                       #apply Right-Hand-Side functions and assigns to L.H.S.
filter(!splticrm %in% c("N.M.","SD","Suspended")) %>%                     #remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%                                  #from numeric to date type
mutate(splticrm= factor(.$splticrm,levels=c("AAA","AA+","AA", "AA-",
"A+","A","A-","BBB+","BBB",
"BBB-", "BB+","BB","BB-",
"B+","B-","B","CCC+","CCC",
"CCC-","CC","C","D"))) %>%              #convert ratings into ordered factors
rename(ratings=splticrm) %>%                                              #rename to something more clear
droplevels()                                                              #drop unused factors
clean_data %<>%
group_by(gvkey) %>%
mutate(defaultbool= ifelse(ratings=='D',1,0)) # %>%                     # create a new column "default_bool" =1 if the compagny defaulted
View(clean_data)
View(clean_data)
View(data)
View(data)
View(clean_data)
linktable2=read.csv("./_DATABASE/Compagny_financials.csv")
View(linktable2)
library(RPostgres)
rm(list=ls())
library(RPostgres)
library(dplyr)
setwd("C:/Users/Vida/Desktop/Th?se/Corporate Default Prediciton/")
wrds <- dbConnect(Postgres(),
host='wrds-pgdata.wharton.upenn.edu',
port=9737,
dbname='wrds',
sslmode='require',
user='bijansn',
password='PasswordForWRDS123')
res <- dbSendQuery(wrds, "select gvkey, splticrm, datadate from adsprate")
data <- dbFetch(res, n=-1)
dbClearResult(res)
save(data, file = "./_DATABASE/[RAW] Compagny_Default.RData")
res <- dbSendQuery(wrds, "select distinct table_schema
from information_schema.tables
where table_type ='VIEW'
or table_type ='FOREIGN TABLE'
order by table_schema")
data <- dbFetch(res, n=-1)
dbClearResult(res)
data
View(data)
res <- dbSendQuery(wrds, "select distinct table_name
from information_schema.columns
where table_schema='wrdsapps'
order by table_name")
data <- dbFetch(res, n=-1)
dbClearResult(res)
View(data)
res <- dbSendQuery(wrds, "select column_name
from information_schema.columns
where table_schema='wrdsapps'
and table_name='firm_ratio'
order by column_name")
data <- dbFetch(res, n=-1)
dbClearResult(res)
data
View(data)
res <- dbSendQuery(wrds, "select column_name
from information_schema.columns
where table_schema='wrdsapps'
and table_name='firm_ratio'
order by column_name")
data <- dbFetch(res, n=-1)
dbClearResult(res)
View(data)
res <- dbSendQuery(wrds, "select column_name
from information_schema.columns
where table_schema='wrdsapps'
and table_name='firm_ratio'
order by column_name")
data <- dbFetch(res, n=-1)
dbClearResult(res)
data
res <- dbSendQuery(wrds, "select * from firm_ratio")
data <- dbFetch(res, n=-1)
rm(list=ls())
library(RPostgres)
library(dplyr)
#setwd("C:/Users/Vida/Desktop/Th?se/Corporate Default Prediciton/")
####################
wrds <- dbConnect(Postgres(),
host='wrds-pgdata.wharton.upenn.edu',
port=9737,
dbname='wrds',
sslmode='require',
user='bijansn',
password='PasswordForWRDS123')
res <- dbSendQuery(wrds, "select gvkey, splticrm, datadate from adsprate")
data <- dbFetch(res, n=-1)
res <- dbSendQuery(wrds, "select column_name
from information_schema.columns
where table_schema='wrdsapps'
and table_name='firm_ratio'
order by column_name")
res <- dbSendQuery(wrds, "select column_name
from information_schema.columns
where table_schema='wrdsapps'
and table_name='firm_ratio'
order by column_name")
res <- dbSendQuery(wrds, "select * from firm_ratio")
data <- dbFetch(res, n=-1)
dbClearResult(res)
rm(list=ls())
library(RPostgres)
library(dplyr)
wrds <- dbConnect(Postgres(),
host='wrds-pgdata.wharton.upenn.edu',
port=9737,
dbname='wrds',
sslmode='require',
user='bijansn',
password='PasswordForWRDS123')
res <- dbSendQuery(wrds, "select column_name
from information_schema.columns
where table_schema='wrdsapps'
and table_name='firm_ratio'
order by column_name")
data <- dbFetch(res, n=-1)
dbClearResult(res)
View(data)
res <- dbSendQuery(wrds, "select * from firm_ratio")
firmfin=read.csv("./_DATABASE/[RAW] Compagny_Financials")
firmfin=read.csv("./_DATABASE/[RAW]Compagny_Financials")
firmfin=read.csv("./_DATABASE/[RAW] Compagny_Financials")
wd()
getwd()
firmfin=read.csv("/_DATABASE/[RAW] Compagny_Financials")
firmfin=read.csv("/_DATABASE/[RAW] Compagny_Financials.csv")
firmfin=read.csv("./_DATABASE/[RAW] Compagny_Financials.csv")
View(firmfin)
View(firmfin)
read.table("./_DATABASE/Variable_Description")
Var_desc=read.table("./_DATABASE/Variable_Description.txt",sep = "/t",row.names = F, col.names = F, quote = FALSE)
Var_desc=read.table("./_DATABASE/Variable_Description.txt",sep = "/t",row.names = F, col.names = F)
Var_desc=read.table("./_DATABASE/Variable_Description.txt")
Var_desc=read.table("./_DATABASE/Variable_Description.txt", sep="/t")
Var_desc=read.table("./_DATABASE/Variable_Description.txt", sep="\t")
View(firmfin)
View(Var_desc)
numFirms= clean_data %>%
count(gvkey)
clean_data=na.omit(data)                                # remove N/As
clean_data=tibble(clean_data)                           # convert into a "modern" dataframe
# str(clean_data) # we need to convert type
clean_data %<>%                                                                       #apply Right-Hand-Side functions and assigns to L.H.S.
filter(!splticrm %in% c("N.M.","SD","Suspended")) %>%                     #remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%                                  #from numeric to date type
mutate(splticrm= factor(.$splticrm,levels=c("AAA","AA+","AA", "AA-",
"A+","A","A-","BBB+","BBB",
"BBB-", "BB+","BB","BB-",
"B+","B-","B","CCC+","CCC",
"CCC-","CC","C","D"))) %>%              #convert ratings into ordered factors
rename(ratings=splticrm) %>%                                              #rename to something more clear
droplevels()                                                              #drop unused factors
clean_data %<>%
group_by(gvkey) %>%
mutate(defaultbool= ifelse(ratings=='D',1,0)) # %>%                     # create a new column "default_bool" =1 if the compagny defaulted
# mutate(defaultbool= max(defaultbool))
save(clean_data, file = "./_DATABASE/[Clean] Compagny_Default.RData")
#-------------- Compagny_Financials dataset : --------------#
# Financial Ratios Firm Level by WRDS
numFirms= clean_data %>%
count(gvkey)
clean_data=na.omit(data)                                # remove N/As
clean_data=tibble(clean_data)                           # convert into a "modern" dataframe
# str(clean_data) # we need to convert type
clean_data %<>%                                                                       #apply Right-Hand-Side functions and assigns to L.H.S.
filter(!splticrm %in% c("N.M.","SD","Suspended")) %>%                     #remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%                                  #from numeric to date type
mutate(splticrm= factor(.$splticrm,levels=c("AAA","AA+","AA", "AA-",
"A+","A","A-","BBB+","BBB",
"BBB-", "BB+","BB","BB-",
"B+","B-","B","CCC+","CCC",
"CCC-","CC","C","D"))) %>%              #convert ratings into ordered factors
rename(ratings=splticrm) %>%                                              #rename to something more clear
droplevels()                                                              #drop unused factors
clean_data %<>%
load("./_DATABASE/[RAW] Compagny_Default.RData")
##----------------- Rating dataset -----------------------
clean_data=na.omit(data)                                # remove N/As
clean_data=tibble(clean_data)                           # convert into a "modern" dataframe
# str(clean_data) # we need to convert type
clean_data %<>%                                                                       #apply Right-Hand-Side functions and assigns to L.H.S.
filter(!splticrm %in% c("N.M.","SD","Suspended")) %>%                     #remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%                                  #from numeric to date type
mutate(splticrm= factor(.$splticrm,levels=c("AAA","AA+","AA", "AA-",
"A+","A","A-","BBB+","BBB",
"BBB-", "BB+","BB","BB-",
"B+","B-","B","CCC+","CCC",
"CCC-","CC","C","D"))) %>%              #convert ratings into ordered factors
rename(ratings=splticrm) %>%                                              #rename to something more clear
droplevels()                                                              #drop unused factors
rm(list=ls())
library(RPostgres)
library(dplyr)
wrds <- dbConnect(Postgres(),
host='wrds-pgdata.wharton.upenn.edu',
port=9737,
dbname='wrds',
sslmode='require',
user='bijansn',
password='PasswordForWRDS123')
res <- dbSendQuery(wrds, "select gvkey, splticrm, datadate from adsprate")
data <- dbFetch(res, n=-1)
dbClearResult(res)
save(data, file = "./_DATABASE/[RAW] Compagny_Default.RData")
clean_data=na.omit(data)                                # remove N/As
clean_data=tibble(clean_data)                           # convert into a "modern" dataframe
library(dplyr)
library(magrittr)
library(tibble)
clean_data %<>%                                                                       #apply Right-Hand-Side functions and assigns to L.H.S.
filter(!splticrm %in% c("N.M.","SD","Suspended")) %>%                     #remove unusable ratings
mutate(datadate=as.Date(.$datadate)) %>%                                  #from numeric to date type
mutate(splticrm= factor(.$splticrm,levels=c("AAA","AA+","AA", "AA-",
"A+","A","A-","BBB+","BBB",
"BBB-", "BB+","BB","BB-",
"B+","B-","B","CCC+","CCC",
"CCC-","CC","C","D"))) %>%              #convert ratings into ordered factors
rename(ratings=splticrm) %>%                                              #rename to something more clear
droplevels()                                                              #drop unused factors
clean_data %<>%
group_by(gvkey) %>%
mutate(defaultbool= ifelse(ratings=='D',1,0)) # %>%                     # create a new column "default_bool" =1 if the compagny defaulted
# mutate(defaultbool= max(defaultbool))
save(clean_data, file = "./_DATABASE/[Clean] Compagny_Default.RData")
numFirms= clean_data %>%
count(gvkey)
numFirms= clean_data %>%
count(gvkey) %>%
write.table("./_DATABASE/Compagny_gvkey.txt", sep = "/n",row.names = F, col.names = F, quote = FALSE) # Save for WRDS's link table  query
numFirms= clean_data %>%
count(gvkey) %>%
write.table(.$gvkey,"./_DATABASE/Compagny_gvkey.txt", sep = "/n",row.names = F, col.names = F, quote = FALSE) # Save for WRDS's link table  query
write.table(numFirms$gvkey,"./_DATABASE/Compagny_gvkey.txt", sep = "/n",row.names = F,
col.names = F, quote = F)
numFirms= clean_data %>%
count(gvkey)
write.table(numFirms$gvkey,"./_DATABASE/Compagny_gvkey.txt", sep = "/n",row.names = F,
col.names = F, quote = F)
View(numFirms)
Var_desc=read.table("./_DATABASE/Variable_Description.txt", sep="\t")
firmfin=read.csv("./_DATABASE/[RAW] Compagny_Financials.csv")
View(Var_desc)
Var_desc=read.table("./_DATABASE/Variable_Description.txt", sep="\t")
rm(Var_desc)
Var_desc=read.table("./_DATABASE/Variable_Description.txt", sep="\t")
Var_desc=read.table("./_DATABASE/Variables_Description.txt", sep="\t")
View(Var_desc)
View(firmfin)
merge(firmfin,clean_data, by = "gvkey")
